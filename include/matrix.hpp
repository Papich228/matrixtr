//unit testing (модульное тестирование) - процесс в программировании, позволяющий проверить на корректность единицы исходного кода, 
//наборы из одного или более программных модулей вместе с соответствующими управляющими данными, процедурами использования и обработки. 
//Идея состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно быстро проверить, не привело
//ли очередное изменение кода к регрессии, то есть к появлению ошибок в уже оттестированных местах программы, а также облегчает обнаружение
//и устранение таких ошибок.
//CMake — это кроссплатформенная система автоматизации сборки программного обеспечения из исходного кода. CMake не занимается 
//непосредственно сборкой, a лишь генерирует файлы управления сборкой из файлов CMakeLists.txt: Makefile (в системах Unix для сборки 
//с помощью make) (другими словами, непосредственно сборкой она не занимается, а только генерирует Makefile, который потом будет
//выполнен утилитой make). 
//CMake может проверять наличие необходимых библиотек и подключать их, собирать проекты под разными компиляторами и операционными 
//системами. Т.е. у вас есть куча кода и файлик, содержащий информацию для cmake, и чтобы скомпилить это дело где-нибудь еще, вам 
//нужно просто запустить там cmake, который сделает всё сам. Использование CMake в простейшем случае выглядит, как в данном проекте
//(в корне репозитория создается файл CMakeLists.txt аналогичного содержания).
//Travis CI — распределённый веб-сервис для сборки и тестирования программного обеспечения, использующий GitHub в качестве хостинга 
//исходного кода. Travis-ci работает с сервисом github.com, поэтому первым делом необходимо выложить туда исходный код своего проекта. 
//За исключением мелких технических настроек (вроде установки хуков в репозитории), весь процесс сводится к описанию различных опций 
//в файле .travis.yml. В нем нужно описать на каком языке работает проект, какие версии языка необходимо использовать,
//среды окружения. Данный файл необходимо разместить в корне github-репозитория. Если настройка прошла успешно, то travis-ci начинает 
//непрерывно тестировать проект, отображая при этом текущий статус: красный цвет (возникли проблемы при тестировании), желтый 
//(есть предупреждения) и зеленый (все тесты пройдены успешно). Помимо статуса можно увидеть: сообщение об ошибке или предупреждение, 
//если что-то пошло не так; последний коммит и его автора; историю сборок и т.д. Помимо этого, travis-ci будет оповещать о проблемах 
//по электронной почте. Особенности: тестированию подвергаются все активные бранчи проекта, в которых присутствует файл .travis.yml;
//состояние программной среды между сборками не сохраняется.
#ifndef LAB_5
#define LAB_5
#include <iostream>
#include <fstream>
#include <cassert>

using namespace std;

class Matrix{
private:
    int **arr;
    int rows;
    int columns;
public:
    Matrix();
    Matrix(int row, int cols);
    ~Matrix();
    int Rows();
    int Columns();
    int Element(int i, int j);
    void Read(string filename);
    void Print();
    Matrix operator+(Matrix& other)const;
    Matrix operator-(Matrix& other)const;
    Matrix operator*(Matrix& other)const;
    Matrix Transp()const ;
    Matrix operator=(Matrix& other)const;
    bool operator==(Matrix& other)const;
    friend ostream& operator<<(ostream& os,const Matrix& other);
    friend istream& operator>>(istream& is, Matrix& other);
};
#endif//директива препроцессорной обертки работает только без имени (при тестировании в travic-ci возникает ошибка компиляции).
